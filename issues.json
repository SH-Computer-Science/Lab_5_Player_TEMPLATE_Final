[{"body":"Implement the following methods:\\n\\n","labels":[],"milestone":{"number":4,"title":"Player Health, Direction, and Attack","description":"Implement health, direction, and attack methods for Player.","dueOn":null},"title":"Implement Health, Direction, and Attack Methods"},{"body":"Implement the following fields and methods:\\n\\n","labels":[],"milestone":{"number":2,"title":"Player State and Accessors","description":"Implement state variables and accessor methods for Player.","dueOn":null},"title":"Implement Player State Variables and Accessor Methods"},{"body":"Implement the following methods:\n```java\n// Gets the distance between this player and another player\npublic double getDistance(Player player) {\n  return Math.sqrt(Math.pow(player.getX() - this.x, 2) +\n          Math.pow(player.getY() - this.y, 2) +\n          Math.pow(player.getZ() - this.z, 2));\n}\n// Gets the distance between this player and the given coordinates\npublic double getDistance(int x, int y, int z) {\n  return Math.sqrt(Math.pow(x - this.x, 2) +\n          Math.pow(y - this.y, 2) +\n          Math.pow(z - this.z, 2));\n}\n// Gets the player as a string in the specified format\npublic String toString() {\n  return \"Name: \" + this.name +\n          \"\\nHealth: \" + this.hp +\n          \"\\nCoordinates: X \" + this.x + \" Y \" + this.y + \" Z \" + this.z +\n          \"\\nDirection: \" + this.direction;\n}\n```\n","labels":[],"milestone":{"number":5,"title":"Player Distance and String Representation","description":"Implement distance and toString methods for Player.","dueOn":null},"title":"Implement Distance and toString Methods"},{"body":"Implement the following methods:\n```java\n// Moves the player by a given number of units in the specified direction\npublic void move(int direction, int units) {\n  if (direction == 1) { this.x += units; }\n  else if (direction == 2) { this.x -= units; }\n  else if (direction == 3) { this.y += units; }\n  else if (direction == 4) { this.y -= units; }\n  else if (direction == 5) { this.z += units; }\n  else if (direction == 6) { this.z -= units; }\n}\n// Teleport the player to the given coordinates\npublic void teleport(int x, int y, int z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n}\n// Teleport the player to the position of the given player\npublic void teleport(Player player) {\n  this.x = player.getX();\n  this.y = player.getY();\n  this.z = player.getZ();\n}\n```\n","labels":[],"milestone":{"number":3,"title":"Player Movement and Teleportation","description":"Implement movement and teleportation methods for Player.","dueOn":null},"title":"Implement Movement and Teleportation Methods"},{"body":"Implement the following constructors for the `Player` class:\n```java\npublic Player() {\n  this(\"P\" + (numPlayers + 1), 0, 0, 0);\n}\npublic Player(String name, int x, int y, int z) {\n  this(name, x, y, z, 20, 1);\n}\npublic Player(String name, int x, int y, int z, int hp, int direction) {\n  this.name = name;\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  setHp(hp);\n  this.direction = 1;\n  setDirection(direction);\n  numPlayers += 1;\n}\n```\n","labels":[],"milestone":{"number":1,"title":"Player Class Construction","description":"Implement constructors for the Player class.","dueOn":null},"title":"Implement Player Class Constructors"}]
